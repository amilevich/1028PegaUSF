--2.1
SELECT * FROM EMPLOYEE;
SELECT * FROM EMPLOYEE WHERE (LASTNAME) LIKE 'K%';
SELECT * FROM EMPLOYEE WHERE (FIRSTNAME) LIKE 'A%' AND (REPORTSTO) IS NULL;
--2.2
SELECT * FROM ALBUM;
SELECT * FROM ALBUM ORDER BY (TITLE) DESC;
SELECT (FIRSTNAME) FROM CUSTOMER ORDER BY(CITY) ASC;
--2.3
SELECT * FROM GENRE;
INSERT INTO GENRE (GENREID, NAME) VALUES (26, 'K-Pop');
INSERT INTO GENRE (GENREID, NAME) VALUES (27, 'Dubstep');
INSERT INTO EMPLOYEE (EMPLOYEEID, LASTNAME, FIRSTNAME, TITLE, REPORTSTO, BIRTHDATE, HIREDATE,
ADDRESS, CITY, STATE, COUNTRY, POSTALCODE, PHONE, FAX, EMAIL) VALUES(9, 'Patel', 'Dev', 'Onboarding', '1', '12-SEP-80', '17-OCT-07',
'12 Bruce Blvd', 'Edmonton', 'AB', 'Canada', 'T5K 2N3', '+1 (401) 444-9865', '+1 (781) 256-7845', 'dpatel80@chinookcorp.com');
INSERT INTO CUSTOMER VALUES(60, 'John', 'Anderson', 'Oracle', '123 Blue St', 'Hartlynn', 'Maine', 'America' , '08963', '+1 (956) 689-7865',
'+1 (986) 879-5934' ,'janderson@hotmail.com' , 2);
--2.4
SELECT * FROM CUSTOMER;
UPDATE CUSTOMER SET FIRSTNAME = 'Robert', LASTNAME = 'Walter' WHERE CUSTOMERID = 33;
SELECT * FROM ARTIST;
UPDATE ARTIST SET NAME = 'CCR' WHERE ARTISTID = 77;
--2.5
SELECT * FROM INVOICE;
SELECT * FROM INVOICE WHERE BILLINGADDRESS LIKE 'T%';
--2.6
SELECT * FROM INVOICE WHERE Total BETWEEN 15 AND 50;
SELECT * FROM EMPLOYEE WHERE HIREDATE BETWEEN TO_DATE('20030601', 'YYYYMMDD') AND TO_DATE('20040301', 'YYYYMMDD');
--2.7
DELETE FROM INVOICELINE WHERE INVOICEID IN
 (SELECT INVOICEID FROM INVOICE WHERE CUSTOMERID =
 (SELECT CUSTOMERID FROM CUSTOMER WHERE FIRSTNAME ='Robert' AND lastname = 'Walter'));
 DELETE FROM INVOICE WHERE CUSTOMERID = (SELECT CUSTOMERID FROM CUSTOMER WHERE FIRSTNAME ='Robert' AND LASTNAME = 'Walter');
 DELETE FROM CUSTOMER WHERE FIRSTNAME ='Robert' AND LASTNAME = 'Walter';
--3.1
SELECT CURRENT_TIMESTAMP FROM dual;
SELECT Length (NAME) FROM MEDIATYPE;
--3.2
SELECT AVG(TOTAL) FROM INVOICE;
--3.3
SELECT AVG(UNITPRICE) FROM INVOICELINE WHERE INVOICELINEID LIKE "INVOICELINEID";
--3.4
CREATE OR REPLACE FUNCTION search1968(x DATE)
RETURN SYS_REFCURSOR IS REFC SYS_REFCURSOR;
BEGIN
    OPEN REFC FOR 'SELECT FIRSTNAME, LASTNAME FROM EMPLOYEE WHERE BIRTHDATE >= :x' using x;
    RETURN REFC;
END;
/
DECLARE 
x DATE;
FN EMPLOYEE.FIRSTNAME%TYPE;
LN EMPLOYEE.LASTNAME%TYPE;
RETURNCUR SYS_REFCURSOR;
BEGIN
x := TO_DATE('1968', 'yyyy');
SELECT search1968(x) INTO RETURNCUR FROM dual;
DBMS_OUTPUT.PUT_LINE('RESULT');
    LOOP
        FETCH RETURNCUR INTO FN, LN;
        EXIT WHEN RETURNCUR%NOTFOUND;
        DBMS_OUTPUT.PUT_LINE(FN || ' ' || LN);
    END LOOP;
END;
/
--5.0
CREATE PROCEDURE INVOICE5
(V_INVOICEID IN INVOICE.INVOICEID%TYPE) IS
BEGIN
DELETE FROM INVOICELINE WHERE INVOICEID = V_INVOICEID;
DELETE FROM INVOICE WHERE INVOICEID = V_INVOICEID;
DBMS_OUTPUT.PUT_LINE('Invoice ID: ' || V_INVOICEID || ' deleted from invoice and invoiceline table.');
COMMIT;
END;
/
CREATE OR REPLACE PROCEDURE TRANS_INSERT (V_CUSTOMERID IN CUSTOMER.CUSTOMERID%TYPE, V_FIRSTNAME IN CUSTOMER.FIRSTNAME%TYPE,
V_LASTNAME IN CUSTOMER.LASTNAME%TYPE, V_EMAIL IN CUSTOMER.EMAIL%TYPE) IS BEGIN INSERT INTO CUSTOMER (CUSTOMERID, FIRSTNAME, LASTNAME, EMAIL) 
VALUES (V_CUSTOMERID, V_FIRSTNAME, V_LASTNAME, V_EMAIL);
COMMIT;
DBMS_OUTPUT.PUT_LINE('ID: ' || V_CUSTOMERID || ' First Name: ' ||
V_FIRSTNAME || ' Last Name: ' || V_LASTNAME || ' Email: ' || V_EMAIL || ' inserted into Customer table.');
END TRANS_INSERT;
/
--6.1
CREATE OR REPLACE TRIGGER INSERT6 AFTER INSERT ON EMPLOYEE BEGIN DBMS_OUTPUT.PUT_LINE('Triggered after new insert'); END;/
--7.1
SELECT CUSTOMER.FIRSTNAME, CUSTOMER.LASTNAME, INVOICE.INVOICEID
FROM CUSTOMER 
INNER JOIN INVOICE
ON CUSTOMER.CUSTOMERID = INVOICE.INVOICEID;
--7.1
SELECT CUSTOMER.CUSTOMERID, CUSTOMER.FIRSTNAME, CUSTOMER.LASTNAME, INVOICE.INVOICEID, INVOICE.TOTAL
FROM CUSTOMER
FULL OUTER JOIN INVOICE
ON CUSTOMER.CUSTOMERID = INVOICE.INVOICEID;
--7.3
SELECT ALBUM.TITLE, ARTIST.NAME
FROM ALBUM
RIGHT JOIN ARTIST
ON ALBUM.TITLE = ARTIST.NAME;
--7.4
SELECT *
FROM ALBUM
CROSS JOIN ARTIST
ORDER BY ARTIST.NAME ASC;
--7.5
SELECT E.EMPLOYEEID, E.FIRSTNAME, F.FIRSTNAME 
FROM  EMPLOYEE E, EMPLOYEE F
WHERE E.REPORTSTO = F.EMPLOYEEID; 