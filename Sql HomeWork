--2.1 SELECT
SELECT *FROM employee;
SELECT * FROM employee WHERE LASTNAME = 'King';

SELECT* FROM employee FIRSTNAME = 'Andrew' AND REPORTSTO IS NULL;
SELECT * FROM GENRE;

--2.2 ORDER BY
SELECT *FROM ALBUM ORDER BY ALBUM.TITLE DESC; INTO GENRE

--2.3 Insert 
INSERT INTO GENRE (GENREID, NAME)
VALUES (26, 'Titanic');

INSERT INTO GENRE (GENREID, NAME);
VALUES (27, 'CARS');

SELECT * FROM EMPLOYEE;
INSERT INTO employee(employeeid,lastname,firstname) VALUES(9,'GESSI','TOMU');

INSERT INTO employee(employeeid,lastname,firstname) VALUES(10,'LEROY','JONHSON');


--2.4 UPDATE
UPDATE customer
SET firstname = 'Robert', lastname='Walter'
WHERE firstname='Aaron' AND lastname = 'Mitchell';

UPDATE artist
SET name ='CCR'
WHERE name = 'Creedence Clearwater rivival';

--2.5 LIKE
SELECT * FROM invoice where billingaddress like 'T%';

--2.6 BETWEEN
SELECT * FROM invoice WHERE TOTAL BETWEEN 15 AND 50;
SELECT * FROM employee WHERE hiredate BETWEEN '01-JUN-03' AND '01-MAR-04';
select * from employee;
DELETE FROM customer 
WHERE  supporttrepid = 3 AND firstname='Robert' AND lastname='Walter';
SELECT * FROM customer;

--2.7 DELETE 
DELETE FROM INVOICELINE WHERE INVOICEID IN
    (SELECT INVOICEID FROM INVOICE WHERE CUSTOMERID IN 
        (SELECT CUSTOMERID FROM CUSTOMER WHERE FIRSTNAME='Robert' AND LASTNAME='Walter'));
DELETE FROM INVOICE WHERE CUSTOMERID IN
    (SELECT CUSTOMERID FROM CUSTOMER WHERE FIRSTNAME='Robert' AND LASTNAME='Walter');
DELETE FROM CUSTOMER WHERE FIRSTNAME='Robert' AND LASTNAME='Walter';

--3.1 SQL Functions
CREATE OR REPLACE FUNCTION CURRENT_TIME
    RETURN TIMESTAMP
    IS CUR_DAY TIMESTAMP;
    BEGIN
        SELECT LOCALTIMESTAMP
        INTO CUR_DAY
        FROM DUAL;
        RETURN CUR_DAY;
    END CURRENT_TIME;
/

DECLARE
    CUR TIMESTAMP;
BEGIN
    CUR := CURRENT_TIME;
    DBMS_OUTPUT.PUT_LINE('Current time is ' || CUR);
END;
/

--3.1
CREATE OR REPLACE FUNCTION MEDIA_NAME(S_ID IN NUMBER)
    RETURN VARCHAR2
    IS NAME MEDIATYPE.NAME%TYPE;
    BEGIN
        SELECT NAME INTO MEDIA_NAME
        FROM MEDIATYPE WHERE MEDIATYPEID = S_ID;
        RETURN MEDIA_NAME;
    END MEDIA_NAME;
/

CREATE OR REPLACE FUNCTION MEDIATYPE_LENGTH(S_ID IN NUMBER)
    RETURN NUMBER
    AS LEN NUMBER;
    BEGIN
        SELECT LENGTH(MEDIA_NAME(S_ID)) INTO LEN
        FROM DUAL;
        RETURN LEN;
    END MEDIATYPE_LENGTH;
/


--3.2 System Defined Aggregate Function
CREATE OR REPLACE FUNCTION TOTAL_OF_INVOICES
    RETURN NUMBER
    AS AVERAGE NUMBER;
    BEGIN
        SELECT AVG(TOTAL) INTO AVERAGE
        FROM INVOICE;
        RETURN AVERAGE;
    END TOTAL_OF_INVOICES;
/

DECLARE
    v NUMBER;
BEGIN
    v := TOTAL_OF_INVOICES;
    DBMS_OUTPUT.PUT_LINE(v);
END;
/

/*3.2b*/
CREATE OR REPLACE FUNCTION EXPENSIVE
    RETURN VARCHAR2
    AS NAMES VARCHAR2(225);
    BEGIN
        SELECT NAME INTO NAMES
        FROM TRACK WHERE rownum = 1 AND UNITPRICE IN
            (SELECT MAX(UNITPRICE) FROM TRACK);
        RETURN NAMES;
    END EXPENSIVE;
/


/*3.3 User Defined Functions*/
CREATE OR REPLACE FUNCTION AVERAGE_INVOICELINE_ITEM_PRICE
    RETURN NUMBER
    AS AVERAGE NUMBER;
    TOTAL NUMBER := 0;
    CUR NUMBER;
    CNT NUMBER := 0;
    CURSOR S IS
        SELECT UNITPRICE FROM INVOICELINE;
    BEGIN
        OPEN S;
        LOOP
            FETCH S INTO CUR;
            TOTAL := TOTAL + CUR;
            CNT := CNT + 1;
            EXIT WHEN S%NOTFOUND;
        END LOOP;
        CLOSE S;
        AVERAGE := TOTAL / CNT;
        RETURN AVERAGE;
    END AVERAGE_INVOICELINE_ITEM_PRICE;
/

DECLARE
    RES NUMBER;
BEGIN
    RES := AVERAGE_INVOICELINE_ITEM_PRICE();
    DBMS_OUTPUT.PUT_LINE('AVERAGE PRICE OF INVOICELINE ITEMS IS: ' || RES);
END;
/


--3.4 User Defined Table Valued Functions
CREATE OR REPLACE TYPE EMPLOYEE_OB IS OBJECT 
    (EID NUMBER, FNAME VARCHAR2(20), LNAME VARCHAR2(20));
/

CREATE OR REPLACE TYPE EMPLOYEE_SET AS TABLE OF EMPLOYEE_OB;
/

CREATE OR REPLACE FUNCTION EMPLOYEE_BORN_AFTER_1968
    RETURN EMPLOYEE_SET
    IS ESET EMPLOYEE_SET := EMPLOYEE_SET(null);
    CURSOR S IS
        SELECT EMPLOYEEID, FIRSTNAME, LASTNAME
        FROM EMPLOYEE E
        WHERE EXTRACT(YEAR FROM E.BIRTHDATE) > 1968;
    EOBJ EMPLOYEE_OB := EMPLOYEE_OB(null, null, null);
    CNT NUMBER := 0;
BEGIN
    OPEN S;
    LOOP
        FETCH S INTO EOBJ.EID, EOBJ.FNAME, EOBJ.LNAME;
        CNT := CNT + 1;
        ESET.EXTEND;
        ESET(CNT):= EMPLOYEE_OBJ(EOBJ.EID, EOBJ.FNAME, EOBJ.LNAME);
        EXIT WHEN S%NOTFOUND;
    END LOOP;
    CLOSE S;
    RETURN ESET;
END EMPLOYEE_BORN_AFTER_1968;
/

DECLARE
    EE EMPLOYEE_SET := EMPLOYEE_SET(null);
BEGIN
    EE := EMPLOYEE_BORN_AFTER_1968;
    
    FOR I IN 1 .. EE.COUNT LOOP
        DBMS_OUTPUT.PUT_LINE('Employee ' ||
                             EE(I).FNAME || ' ' || 
                             EE(I).LNAME || ' with ID:' ||
                             EE(I).EID);
    END LOOP;
END;
/




--5.0 Transactions
CREATE OR REPLACE PROCEDURE DELETE_INVOICE 
    (REQ_ID IN INVOICE.INVOICEID%TYPE)
IS
BEGIN
    DELETE FROM INVOICELINE WHERE INVOICEID = REQ_ID;
    DELETE FROM INVOICE WHERE INVOICEID = REQ_ID;
    COMMIT;
END DELETE_INVOICE;
/

BEGIN
    DELETE_INVOICE(10);
END;
/

--5.0b
CREATE OR REPLACE PROCEDURE INSERT_CUSTOMER
    (NEW_CUSTOMER IN CUSTOMER%ROWTYPE)
IS
BEGIN
    INSERT INTO CUSTOMER VALUES NEW_CUSTOMER;
    COMMIT;
END INSERT_CUSTOMER;
/

DECLARE
    ADD_ONE CUSTOMER%ROWTYPE;
    CURSOR S IS 
        SELECT * FROM CUSTOMER ORDER BY CUSTOMERID DESC;
BEGIN
    OPEN S;
    LOOP
        FETCH S INTO ADD_ONE;
        EXIT;
    END LOOP;
    CLOSE S;
    
    ADD_ONE.CUSTOMERID := ADD_ONE.CUSTOMERID + 1;
    INSERT_CUSTOMER(ADD_ONE);
    DBMS_OUTPUT.PUT_LINE('ADDED CUSTOMER WITH ID OF: ' || ADD_ONE.CUSTOMERID);
END;
/


--6.1 Triggers
CREATE OR REPLACE TRIGGER TR_EMPLOYEE_INSERT 
AFTER INSERT
ON EMPLOYEE
FOR EACH ROW
BEGIN
    DBMS_OUTPUT.PUT_LINE('After Insert');
END TR_EMPLOYEE_INSERT;
/

DECLARE
    EMP EMPLOYEE%ROWTYPE;
BEGIN
    SELECT * INTO EMP FROM
    (SELECT * FROM EMPLOYEE ORDER BY EMPLOYEEID DESC)
    WHERE rownum = 1;
    
    EMP.EMPLOYEEID := EMP.EMPLOYEEID + 1;
    
    INSERT INTO EMPLOYEE VALUES emp;
END;
/


--6.1b
CREATE OR REPLACE TRIGGER TR_ALBUM_UPDATE
AFTER UPDATE ON ALBUM
FOR EACH ROW
BEGIN
    DBMS_OUTPUT.PUT_LINE('After Update');
END TR_ALBUM_UPDATE;
/

BEGIN
    UPDATE ALBUM
    SET ALBUM.TITLE = 'Balls to the Wall Redux'
    WHERE ALBUM.ALBUMID = 2;
END;
/


--6.1c
CREATE OR REPLACE TRIGGER TR_CUSTOMER_DELETE
AFTER DELETE ON CUSTOMER
FOR EACH ROW
BEGIN
    DBMS_OUTPUT.PUT_LINE('After Delete');
END TR_CUSTOMER_DELETE;
/

DECLARE
    ADD_ONE CUSTOMER%ROWTYPE;
    CURSOR S IS SELECT * FROM CUSTOMER ORDER BY CUSTOMERID DESC;
BEGIN
    OPEN S;
    FETCH S INTO ADD_ONE;
    CLOSE S;
    
    ADD_ONE.CUSTOMERID := ADD_ONE.CUSTOMERID + 1;
    INSERT_CUSTOMER(ADD_ONE);
    
    DELETE FROM CUSTOMER WHERE CUSTOMER.CUSTOMERID = ADD_ONE.CUSTOMERID;
END;
/


--7.1 Inner
SELECT C.FIRSTNAME, C.LASTNAME, I.INVOICEID
FROM CUSTOMER C
INNER JOIN INVOICE I
ON C.CUSTOMERID = I.CUSTOMERID;


--7.2 Outer
SELECT C.CUSTOMERID, C.FIRSTNAME, C.LASTNAME, I.INVOICEID, I.TOTAL
FROM CUSTOMER C
LEFT OUTER JOIN INVOICE I ON C.CUSTOMERID = I.CUSTOMERID;


--7.3 Right
SELECT ARTIST.NAME, ALBUM.TITLE
FROM ALBUM
RIGHT OUTER JOIN ARTIST ON ALBUM.ARTISTID = ARTIST.ARTISTID;


--7.4 Cross
SELECT *
FROM ALBUM
CROSS JOIN ARTIST
ORDER BY ARTIST.NAME ASC;


--7.5 Self
SELECT *
FROM EMPLOYEE E1
INNER JOIN EMPLOYEE E2
ON E1.REPORTSTO = E2.REPORTSTO;


